# forest_app/modules/hta_models.py
"""
Pydantic models for representing and validating Hierarchical Task Analysis (HTA)
tree structures, potentially generated by an LLM or loaded from storage.
"""
from __future__ import annotations # Required for recursive type hints in Pydantic v1/v2

import logging
import uuid
from typing import List, Optional
# Make sure ValidationInfo is imported if using Pydantic v2 style validators
from pydantic import BaseModel, Field, field_validator, ValidationInfo

logger = logging.getLogger(__name__)

# --- HTA Node Model ---
class HTANodeModel(BaseModel):
    """Pydantic model for validating a single HTA node structure."""
    # Core HTA Attributes
    id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for the node.")
    title: str = Field(..., max_length=150, description="Concise title for the HTA step.")
    # --- MODIFIED LINE BELOW ---
    description: Optional[str] = Field(default=None, description="Detailed description of the HTA step.")
    # --- END MODIFICATION ---
    priority: float = Field(default=0.5, ge=0.0, le=1.0, description="Priority score (0.0-1.0).")
    depends_on: List[str] = Field(default=[], description="List of IDs of nodes this node depends on.")
    estimated_energy: str = Field(
        default="medium",
        pattern="^(low|medium|high)$",
        description="Estimated energy cost ('low', 'medium', 'high')."
    )
    estimated_time: str = Field(
        default="medium",
        pattern="^(low|medium|high)$",
        description="Estimated time cost ('low', 'medium', 'high')."
    )
    linked_tasks: List[str] = Field(
        default=[],
        description="List of task IDs linked to this node."
    )
    # --- NEW: Milestone Flag ---
    is_milestone: bool = Field(
        default=False,
        description="Indicates if completing this node represents a significant milestone."
    )
    # --- END NEW ---

    # --- Optional AI / Metadata Fields ---
    rationale: Optional[str] = Field(
        default=None,
        description="LLM's rationale or justification for this node, if available."
    )
    status_suggestion: Optional[str] = Field(
        default=None,
        pattern="^(pending|active|completed|pruned|blocked)$", # Added 'blocked'
        description="LLM's suggested initial status or a status loaded from state."
    )

    # --- Recursive Children ---
    children: List[HTANodeModel] = Field(default=[], description="List of child HTA nodes.")

    @field_validator('depends_on')
    def check_depends_on_not_self(cls, v, info: ValidationInfo): # Updated signature for Pydantic v2
        # In Pydantic v1, use @validator('depends_on') and the signature (cls, v, values, **kwargs)
        node_id = info.data.get('id') # Access id from data being validated
        if node_id and node_id in v:
            raise ValueError(f"Node {node_id} cannot depend on itself.")
        return v

    class Config:
        extra = "ignore"
        validate_assignment = True


# --- HTA Response Model (Wrapper) ---
class HTAResponseModel(BaseModel):
    """Pydantic model for validating the overall HTA tree response from LLM or storage."""
    hta_root: HTANodeModel = Field(..., description="The root node of the HTA tree.")

    class Config:
        extra = "ignore"

# --- Make models easily importable ---
__all__ = [
    "HTANodeModel",
    "HTAResponseModel",
]

logger.debug("HTA Pydantic models defined in hta_models.py.")
